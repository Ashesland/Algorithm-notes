//二分查找
#include<stdio.h>
int binarySearch(int A[],int left,int right,int x){
    int mid;
    while(left<=right){
        mid=(left+right)/2;
        if(A[mid] == x)
            return mid;
        else if(A[mid]>x)
            right=mid-1;
        else
            left=mid+1;
    }
    return -1;
}

int main(){
    int A[10]={1,3,4,6,7,8,10,11,12,15};
    printf("%d,%d\n",binarySearch(A,0,9,6),binarySearch(A,0,9,9));
}

//二分查找拓展
//装水问题
问题描述：一个侧面为半圆的储水装置，半径为R，往其中装入高度为h的水，使其在侧面看上去的面积S1同半圆面积S2的比值为r，现给定R和r，求高度h。
思路：由r=s1/s2，s2不变，r为s1的递增函数。由二分法，可在[0，R]范围内寻找高度h，由关系式得出r值同给定值进行比较，进而逼近高度h的近似值。

#include<cstdio>
#include<cmath>
const double PI=acos(-1.0);     //PI值
const double eps=le-5;      //精度为10^-5
double f(double R, double h){       //公示r=f(h),其中f严格递增
    double alpha=2*acos((R-h)/R);
    double L=2*sqrt(R*R-(R-h)*(R-h));       //大三角对应底边
    double S1=alpha*R*R/2-L*(R-h)/2;
    double S2=PI*R*R/2;
    return S1/S2;
}
double solve(double R,double r){        //二分逼近h值
    double left=0,right=R,mid;
    while (right-left>eps){
        mid=(left+right)/2;
        if(f(R,mid)>r)
            right=mid;
        else
            left=mid;
     }
     return mid;
}
int main(){
    double R,r;
    scanf("%lf%lf",&R,&r);
    printf("%.4f\n",solve(R,r));
    return 0;
}

//快速幂问题
问题描述：给定三个整数a，b，m（a<10^9,b<10^18,m<10^9, 求a^b%m。
当a，b，m足够小时，可用循环b次a求出，当数太大时则难以计算。
考虑到：1) 当b为奇数时，有a^b=a*a^(b-1).
       2）当b为偶数时，有a^b=(a^(b/2))^2.
只需经过log(b)级别次数则算出，程序采用递归写法.
typedef long long LL;
LL binaryPow(LL a,LL b,LL m){
    if(b==0)        //临界条件
        return 1;
    if(b%2==1)  //若b为奇数
        return a*binaryPow(a,b-1,m)%m;
    else{       //b为偶数
        LL mul=binaryPow(a,b/2,m);      //注意不要直接返回两个函数之积，否则增加运算量.
        return mul*mul%m;
    }
}

//快速幂的迭代写法：
对问题a^b%m，将b化为二进制形式，则可将b写作若干二次幂之和。如13=2^3+2^2+2^0=8+4+1。发现a^13=a^8*a^4*a^1，且任意a^b都可表示为a^2^k,...,a^4,a^2,a^1中若干项之积。
则计算a^b：令i从0到k枚举b的二进制的每一位，若当前位为1，则累积a^2^i。
1)令ans=1，存放累积结果
2)判断b二进制末尾是否为1（判断b&1是否为1）是则ans*a
3)令a平方（因为序列a^2^k,...,a^4,a^2,a^1每一项都是其后一项的两倍，而只有当b末尾为一时，才会选中此时的a，可理解为a序列的一个迭代器）并将b右移一位
4)只要b大于0，就返回步骤2)
typedef long long LL;
LL binaryPow(LL a,LL b,LL m){
    LL ans =1;
    while(b>0){
        if(b&1)     //b的二进制末尾为1，也可写作(b%2)
            ans=ans*a%m;
        a=a*a%m;        //令a平方
        b>>=1;
    }
    return ans;
}

