问题描述：给定一个递增正整数序列和一个正整数M，求序列中两不同位置的数a，b。使得二者和恰好为M，输出所有方案。
若用二重循环枚举所有可能，复杂度为O(n^2)。利用序列的递增性质，分别从头尾两个指针i,j按a，b，M的大小分别向内移动，分三种情况。
1)若a[i]+a[j]==M,则当i,j均向内移动时也可能产生答案，所以二者均向内移动。
2)若a[i]+a[j]>M,则a以后的数同a[j]相加必大于M，i没有必要再向右，则令j向左移动
3)同理，若a[i]+a[j]<M，则令i向右移动。
4)反复执行上述三个判断，直至i>=j.

//序列合并问题
问题描述：将两递增序列A，B合并为一个递增序列C.
采用同向移动i,j同样属于Two pointers思想.
int merge(int A[],int B[].int C[],int n,int m){
	int i=0,j=0,index=0;
	while(i<n && j<m){
		if(A[i]<=B[j])
			C[index++]=A[i++];
		else
			C[index++]=B[j++];
	}
	while(i<n)
		C[index++]=A[i++];
	while(j<m)
		C[index++]=B[j++];
	return index;	//返回C序列长度.
}

//归并排序
思路：将一个序列两两分组排序后，将排好的序列看作一个整体，再两两分组排序（用到序列合并问题），直至全部合并为一个序列。
//递归实现
const int maxn=100;
void merge(int A[],int L1,int R1,int L2,int R2){	//将A数组的左子区间[L1,R1]与右子区间[L2,R2]合并为有序区间，改编自上述序列合并问题
	int i=L1,j=L2;		//i指向左序列首元素，j指向右序列首元素
	int temp[maxn],index=0;
	while(i<=R1 && j<=R2){
		if(A[i]<=A[j])
			temp[index++]=A[i++];
		else
			temp[index++]=A[j++];
	}
	while(i<=R1)
		temp[index++]=A[i++];
	while(j<=R2)
		temp[index++]=A[j++];
	for(int i=0;i<index;i++{
		A[L1+1]=temp[i];	//将合并后的序列赋值回数组A
	}
}
void mergeSort(int A[],int left,int right){
	if(left<right){
		int mid=(left+right)/2;
		mergeSort(A,left,mid);		//将左子区间归并排序
		mergeSort(A,mid+1,right);	//将右子区间归并排序
		merge(A,left,mid,mid+1,right);		//将左右两子区间合并
	}
}

//非递归实现
